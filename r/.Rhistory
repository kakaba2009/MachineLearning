source('./lib/mfractal.R')
saveCSV('JPY=X')
x <- loadSymbol('JPY=X')
x <- x['High']
x
str(x)
ts <- as.ts(df)
df
df
df <- loadSymbol('JPY=X')
df <- df['High']
df
str(str)
str(df)
df <- loadSymbol('JPY=X')
df <- df[['High']]
df
str(df)
ts <- as.ts(df)
ts
str(ts)
ts <- ts[1:1000]
ts
str(ts)
(ts)
d <- calcBestDimension(ts, 1, 0.90)
t <- calcTakens(ts, d, 1)
r <- calcInfoDimension(ts, 7, 1)
calcRecurrPlot(t, ts, d, 1, r*2.0)
calcRQA(t, ts, d, r*2.0)
df <- loadSymbol('JPY=X')
df
str(df)
df$High
str(df$High)
str(df$Date)
df <- loadSymbol('JPY=X')
df <- df$High
df
ts <- as.ts(df)
ts <- ts[1:1000]
str(ts)
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
ts
ts <- to.weekly(ts)
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
to.weekly(ts)
library(xts)
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
to.weekly(ts)
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
ts <- tail(ts, n=1000)
ts
str(ts)
str(ts)
source('D:/git/MachineLearning/r/mylib/mcalc.R')
source('D:/git/MachineLearning/r/mylib/mfractal.R')
source('D:/git/MachineLearning/r/mylib/mtool.R')
library(DBI)
source('D:/git/MachineLearning/r/learn/mfile.R')
source('D:/git/MachineLearning/r/learn/recurr.R')
source('D:/git/MachineLearning/r/learn/takens.R')
source('D:/git/MachineLearning/r/learn/takens.R')
source('D:/git/MachineLearning/r/learn/takens.R')
source('D:/git/MachineLearning/r/learn/takens.R')
library(rEDM)
library(data.table)
data("two_species_model")
str(two_species_model)
data("forex")
block <- two_species_model[1:500,]
str(block)
output <- block_lnlp(block, columns = c("x", "y"),
first_column_time = TRUE, stats_only = FALSE)
str(output)
output[[1]]
output <- block_lnlp(block, columns = c("x", "y"),
first_column_time = TRUE, stats_only = FALSE)
output <- output[[1]]$model_output
output$pred_err <- sqrt(output$pred_var)
t <- 1:250
plot(t, output$obs[t], type = "l")
points(t, output$pred[t], col = "blue")
for(i in t)
{
lines(c(i,i), c(output$pred[i]-output$pred_err[i],
output$pred[i]+output$pred_err[i]), col = "blue")
}
block_lnlp(block, target_column = 2, columns = c("x"), first_column_time = TRUE)
data("two_species_model")
df <- loadSymbol('JPY=X')
two_species_model <- df
str(two_species_model)
library(rEDM)
library(data.table)
df <- loadSymbol('JPY=X')
two_species_model <- df
str(df)
library(rEDM)
source('./mylib/mtool.R')
df <- loadSymbol('JPY=X')
str(df)
two_species_model <- df
block <- two_species_model[1:500,]
output <- block_lnlp(block, columns = c("Open", "Close"),
first_column_time = TRUE, stats_only = FALSE)
output <- output[[1]]$model_output
output$pred_err <- sqrt(output$pred_var)
t <- 1:250
plot(t, output$obs[t], type = "l")
points(t, output$pred[t], col = "blue")
for(i in t)
{
lines(c(i,i), c(output$pred[i]-output$pred_err[i],
output$pred[i]+output$pred_err[i]), col = "blue")
}
output$pred_err
source('./mylib/mtool.R')
data("two_species_model")
str(two_species_model)
df <- loadSymbol('JPY=X')
View(two_species_model)
View(df)
two_species_model <- df
block <- two_species_model[1:500,]
output <- block_lnlp(block, columns = c("Open", "High", "Low", "Close"),
first_column_time = TRUE, stats_only = FALSE)
output <- output[[1]]$model_output
output$pred_err <- sqrt(output$pred_var)
output$pred_err
output$pred_err <- sqrt(output$pred_var)
t <- 1:250
plot(t, output$obs[t], type = "l")
points(t, output$pred[t], col = "blue")
for(i in t)
{
lines(c(i,i), c(output$pred[i]-output$pred_err[i],
output$pred[i]+output$pred_err[i]), col = "blue")
}
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
t <- length(block)
library(rEDM)
library(data.table)
source('./mylib/mtool.R')
data("two_species_model")
df <- loadSymbol('JPY=X')
two_species_model <- df
block <- two_species_model#[1:500,]
output <- block_lnlp(block, columns = c("Open", "High", "Low", "Close"),
first_column_time = TRUE, stats_only = FALSE)
output <- output[[1]]$model_output
output$pred_err <- sqrt(output$pred_var)
t <- length(block)
t
block
str(block)
t <- length(block$Date)
t
plot(t, output$obs[t], type = "l")
points(t, output$pred[t], col = "blue")
for(i in t)
{
lines(c(i,i), c(output$pred[i]-output$pred_err[i],
output$pred[i]+output$pred_err[i]), col = "blue")
}
output$pred_err
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
t <- seq(from=1, to=length(block$Date) * 0.5)
t
str(t)
plot(t, output$obs[t], type = "l")
points(t, output$pred[t], col = "blue")
for(i in t)
{
lines(c(i,i), c(output$pred[i]-output$pred_err[i],
output$pred[i]+output$pred_err[i]), col = "blue")
}
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
length(block$Date)
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
data("two_species_model")
df <- loadSymbol('JPY=X')
len <- length(df$Date)
len
two_species_model <- df
block <- two_species_model[len-1000:len,]
block
str(block)
source('./mylib/mtool.R')
data("two_species_model")
df <- loadSymbol('JPY=X')
len <- length(df$Date)
two_species_model <- df
block <- two_species_model[len-1000:len,]
library(rEDM)
library(data.table)
source('./mylib/mtool.R')
data("two_species_model")
df <- loadSymbol('JPY=X')
len <- length(df$Date)
two_species_model <- df
block <- tail(two_species_model, n=1000)
output <- block_lnlp(block, columns = c("Open", "High", "Low", "Close"),
target_column = "Close",
first_column_time = TRUE, stats_only = FALSE)
output <- output[[1]]$model_output
output$pred_err <- sqrt(output$pred_var)
t <- seq(from=1, to=len)
plot(t, output$obs[t], type = "p", col = "green")
points(t, output$pred[t], col = "blue")
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
source('D:/git/MachineLearning/r/inst/tests/test_block_lnlp.R')
str(output)
tail(block)
block_lnlp()
library(rEDM)
library(data.table)
source('./mylib/mtool.R')
df <- loadSymbol('JPY=X')
len <- length(df$Date)
two_species_model <- df
block <- tail(two_species_model, n=1000)
block
source('D:/git/MachineLearning/r/inst/tests/test_lnlp.R')
source('D:/git/MachineLearning/r/inst/tests/test_lnlp.R')
y
lib <- c(1, 100)
lib
source('D:/git/MachineLearning/r/learn/simplex.R')
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
ts <- tail(ts, n=1000)
tentmap_del <- ts
lib  <- c(1, 100)
pred <- c(201, 500)
lib  <- c(1, 500)
pred <- c(501, 1000)
simplex_output <- simplex(ts, lib, pred)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/s_map.R')
source('D:/git/MachineLearning/r/learn/s_map.R')
library(rEDM)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
block_3sp <- loadSymbol('JPY=X')
lib  <- c(1, NROW(block_3sp))
pred <- c(1, NROW(block_3sp))
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = c(1, 2, 3, 4),
target_column = 4, stats_only = FALSE, first_column_time = TRUE)
observed <- block_lnlp_output[[1]]$model_output$obs
predicted <- block_lnlp_output[[1]]$model_output$pred
par(mar = c(4, 4, 1, 1), pty = "s")
plot_range <- range(c(observed, predicted), na.rm = TRUE)
plot(observed, predicted, xlim = plot_range, ylim = plot_range, xlab = "Observed", ylab = "Predicted")
abline(a = 0, b = 1, lty = 2, col = "blue")
View(block_3sp)
str(block_3sp)
lib
pred
source('D:/git/MachineLearning/r/inst/tests/test_ccm.R')
View(sardine_anchovy_sst)
source('D:/git/MachineLearning/r/inst/tests/test_ccm.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/s_map.R')
library(nonlinearTseries)
library(xts)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
saveCSV('JPY=X')
lib_sizes = seq(10, 80, by = 10)
lib_sizes
library(rEDM)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
df <- loadSymbol('JPY=X')
data(sardine_anchovy_sst)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10),
random_libs = FALSE)
sst_xmap_anchovy <- ccm(sardine_anchovy_sst, E = 3, lib_column = "np_sst", target_column = "anchovy",
lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
a_xmap_t_means <- ccm_means(anchovy_xmap_sst)
t_xmap_a_means <- ccm_means(sst_xmap_anchovy)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(a_xmap_t_means$lib_size, pmax(0, a_xmap_t_means$rho), type = "l", col = "red",
xlab = "Library Size", ylab = "Cross Map Skill (rho)", ylim = c(0, 0.4))
lines(t_xmap_a_means$lib_size, pmax(0, t_xmap_a_means$rho), col = "blue")
legend(x = "topleft", legend = c("anchovy xmap SST", "SST xmap anchovy"), col = c("red", "blue"),
lwd = 1, inset = 0.02, cex = 0.8)
a_xmap_t_means$rho
pmax(0, a_xmap_t_means$rho)
a_xmap_t_means$lib_size
source('D:/git/MachineLearning/r/learn/simplex.R')
library(rEDM)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
df <- loadSymbol('JPY=X')
df <- df$High
ts <- as.ts(df)
ts <- tail(ts, n=1000)
lib  <- c(1, 900)
pred <- c(901, 1000)
simplex_output <- simplex(ts, lib, pred)
simplex_output
simplex_output$E
simplex_output <- simplex(ts, lib, pred)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred, E = 3, tp = 1:10)
par(mar = c(4, 4, 1, 1))
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
bestE <- sapply(simplex_output_list, function(simplex_output) {
simplex_output$E[which.max(simplex_output$rho)]
})
bestE
bestE <- sapply(simplex_output, function(simplex_output) {
simplex_output$E[which.max(simplex_output$rho)]
})
simplex_output$E
simplex_output <- simplex(ts, lib, pred, E = 3, tp = 1:10)
par(mar = c(4, 4, 1, 1))
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
bestE <- sapply(simplex_output, function(simplex_output) {
simplex_output$E[which.max(simplex_output$rho)]
})
which.max(simplex_output$rho)
simplex_output$E[which.max(simplex_output$rho)]
source('D:/git/MachineLearning/r/learn/simplex.R')
print("Best Dim:" bestE)
print("Best Dim:", bestE)
bestE <- simplex_output$E[which.max(simplex_output$rho)]
print("Best Dim:", bestE)
source('D:/git/MachineLearning/r/learn/simplex.R')
cat("Best Dim:", bestE)
source('D:/git/MachineLearning/r/learn/simplex.R')
?which.max
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
head(ts)
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
simplex_output$rho
which.max(simplex_output$rho)
simplex_output$E[which.max(simplex_output$rho)]
simplex_output$E
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
str(ts)
tail(ts)
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/simplex.R')
source('D:/git/MachineLearning/r/learn/s_map.R')
library(rEDM)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
df <- loadSymbol('JPY=X')
View(df)
data(sardine_anchovy_sst)
View(sardine_anchovy_sst)
source('D:/git/MachineLearning/r/learn/ccm.R')
df <- loadSymbol('JPY=X')
df <- tail(df, n=1000)
df
str(df)
View(df)
df <- loadSymbol('JPY=X')
df <- df[-1000]
View(df)
df <- loadSymbol('JPY=X')
df <- df[-1000,]
View(df)
df <- loadSymbol('JPY=X')
df <- tail(df, 1000)
View(df)
df[1]
library(rEDM)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
source('./mylib/mfractal.R')
df <- loadSymbol('JPY=X')
df <- tail(df, 1000)
anchovy_xmap_sst <- ccm(df, E = 3, lib_column = "High",
target_column = "Close", lib_sizes = seq(10, 80, by = 10),
random_libs = FALSE)
sst_xmap_anchovy <- ccm(df, E = 3, lib_column = "Close", target_column = "High",
lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
a_xmap_t_means <- ccm_means(anchovy_xmap_sst)
t_xmap_a_means <- ccm_means(sst_xmap_anchovy)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(a_xmap_t_means$lib_size, pmax(0, a_xmap_t_means$rho), type = "l", col = "red",
xlab = "Library Size", ylab = "Cross Map Skill (rho)", ylim = c(0, 0.4))
lines(t_xmap_a_means$lib_size, pmax(0, t_xmap_a_means$rho), col = "blue")
legend(x = "topleft", legend = c("anchovy xmap SST", "SST xmap anchovy"), col = c("red", "blue"),
lwd = 1, inset = 0.02, cex = 0.8)
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
data(sardine_anchovy_sst)
View(sardine_anchovy_sst)
str(sardine_anchovy_sst)
df <- loadSymbol('JPY=X')
df <- head(df, 1000)
View(df)
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
View(df)
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
query <- paste('SELECT Date,Open,High,Low,Close FROM FX WHERE Symbol = ',"'",symbol,"'",sep='')
library(rEDM)
library(data.table)
library(dplyr)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
JPY <- loadSymbol('JPY=X')
JPY <- head(df, 1000)
EUR <- loadSymbol('EUR=X')
EUR <- head(df, 1000)
setDT(JPY)
setDT(EUR)
View(EUR)
str(JPY)
df <- left_join(JPY, EUR, by=c("Date"))
df
View(df)
View(EUR)
EUR <- loadSymbol('EUR=X')
View(EUR)
library(rEDM)
library(data.table)
library(dplyr)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
JPY <- loadSymbol('JPY=X')
JPY <- head(JPY, 1000)
EUR <- loadSymbol('EUR=X')
EUR <- head(EUR, 1000)
setDT(JPY)
setDT(EUR)
df <- left_join(JPY, EUR, by=c("Date"))
View(EUR)
View(df)
JPY <- loadSymbol('JPY=X')
JPY <- tail(JPY, 1000)
EUR <- loadSymbol('EUR=X')
EUR <- tail(EUR, 1000)
setDT(JPY)
setDT(EUR)
df <- left_join(JPY, EUR, by=c("Date"))
View(df)
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/ccm.R')
source('D:/git/MachineLearning/r/learn/multivariate.R')
library(rEDM)
library(data.table)
library(dplyr)
source('./mylib/mcalc.R')
source('./mylib/mtool.R')
JPY <- loadSymbol('JPY=X')
JPY <- tail(JPY, 1000)
EUR <- loadSymbol('EUR=X')
EUR <- tail(EUR, 1000)
setDT(JPY)
setDT(EUR)
df <- left_join(JPY, EUR, by=c("Date"))
lib  <- c(1, NROW(df))
pred <- c(1, NROW(df))
View(df)
block_lnlp_output <- block_lnlp(df, lib = lib, pred = pred, columns = c("Close.x","Close.y"),
target_column = "Close.x", stats_only = FALSE, first_column_time = TRUE)
observed  <- block_lnlp_output[[1]]$model_output$obs
predicted <- block_lnlp_output[[1]]$model_output$pred
par(mar = c(4, 4, 1, 1), pty = "s")
plot_range <- range(c(observed, predicted), na.rm = TRUE)
plot(observed, predicted, xlim = plot_range, ylim = plot_range, xlab = "Observed", ylab = "Predicted")
abline(a = 0, b = 1, lty = 2, col = "blue")
block_lnlp_output
str(block_lnlp_output)
